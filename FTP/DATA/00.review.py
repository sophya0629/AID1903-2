"""
1.threading 创建线程
    Thread() 创建线程对象
    start() 启动线程
    join() 回收线程
2.线程对象属性
3.自定义线程类
    继承 Thread
    重写__init__和run
4.线程同步互斥
    通信:全局变量
    同步互斥方法 Event  Lock
    死锁:多个线程因为资源的争夺造成锁混乱,无法继续执行,是不想看到的
        延迟处理
        使用RLock
5.GIL
    1. python线程的GIL问题 (全局解释器锁)
    什么是GIL :由于python解释器设计中加入了解释器锁,导致python解释器同一时刻只能解释执
    行一个线程,大大降低了线程的执行效率。
    导致后果: 因为遇到阻塞时线程会主动让出解释器,去解释其他线程。所以python多线程在执行
    多阻塞高延迟IO时可以提升程序效率,其他情况并不能对效率有所提升。
    GIL问题建议
    尽量使用进程完成无阻塞的并发行为
    不使用c作为解释器 (Java C#)
    2. 结论 : 在无阻塞状态下,多线程程序和单线程程序执行效率几乎差不多,甚至还不如单线程效
    率。但是多进程运行相同内容却可以有明显的效率提升。
6.进程线程区别

"""